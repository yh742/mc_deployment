# Copyright 2016 Canonical Ltd.
#
# This file is part of the Snap layer for Juju.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"options":
  "snap_proxy":
    "description": "HTTP/HTTPS web proxy for Snappy to use when accessing the snap\
      \ store.\n"
    "type": "string"
    "default": ""
  "snap_proxy_url":
    "default": ""
    "type": "string"
    "description": "The address of a Snap Store Proxy to use for snaps e.g. http://snap-proxy.example.com\n"
  "snapd_refresh":
    "default": "max"
    "type": "string"
    "description": |
      How often snapd handles updates for installed snaps. Setting an empty
      string will check 4x per day. Set to "max" to delay the refresh as long
      as possible. You may also set a custom string as described in the
      'refresh.timer' section here:
        https://forum.snapcraft.io/t/system-options/87
  "nagios_context":
    "default": "juju"
    "type": "string"
    "description": |
      Used by the nrpe subordinate charms.
      A string that will be prepended to instance name to set the host name
      in nagios. So for instance the hostname would be something like:
          juju-myservice-0
      If you're running multiple environments with the same services in them
      this allows you to differentiate between them.
  "nagios_servicegroups":
    "default": ""
    "type": "string"
    "description": |
      A comma-separated list of nagios servicegroups.
      If left empty, the nagios_context will be used as the servicegroup
  "audit-policy":
    "type": "string"
    "default": |
      apiVersion: audit.k8s.io/v1beta1
      kind: Policy
      rules:
      # Don't log read-only requests from the apiserver
      - level: None
        users: ["system:apiserver"]
        verbs: ["get", "list", "watch"]
      # Don't log kube-proxy watches
      - level: None
        users: ["system:kube-proxy"]
        verbs: ["watch"]
        resources:
        - resources: ["endpoints", "services"]
      # Don't log nodes getting their own status
      - level: None
        userGroups: ["system:nodes"]
        verbs: ["get"]
        resources:
        - resources: ["nodes"]
      # Don't log kube-controller-manager and kube-scheduler getting endpoints
      - level: None
        users: ["system:unsecured"]
        namespaces: ["kube-system"]
        verbs: ["get"]
        resources:
        - resources: ["endpoints"]
      # Log everything else at the Request level.
      - level: Request
        omitStages:
        - RequestReceived
    "description": |
      Audit policy passed to kube-apiserver via --audit-policy-file.
      For more info, please refer to the upstream documentation at
      https://kubernetes.io/docs/tasks/debug-application-cluster/audit/
  "audit-webhook-config":
    "type": "string"
    "default": ""
    "description": |
      Audit webhook config passed to kube-apiserver via --audit-webhook-config-file.
      For more info, please refer to the upstream documentation at
      https://kubernetes.io/docs/tasks/debug-application-cluster/audit/
  "addons-registry":
    "type": "string"
    "default": ""
    "description": "Specify the docker registry to use when applying addons"
  "enable-dashboard-addons":
    "type": "boolean"
    "default": !!bool "true"
    "description": "Deploy the Kubernetes Dashboard and Heapster addons"
  "enable-kube-dns":
    "type": "boolean"
    "default": !!bool "true"
    "description": "Deploy kube-dns addon"
  "dns_domain":
    "type": "string"
    "default": "cluster.local"
    "description": "The local domain for cluster dns"
  "extra_sans":
    "type": "string"
    "default": ""
    "description": |
      Space-separated list of extra SAN entries to add to the x509 certificate
      created for the master nodes.
  "service-cidr":
    "type": "string"
    "default": "10.152.183.0/24"
    "description": "CIDR to user for Kubernetes services. Cannot be changed after\
      \ deployment."
  "allow-privileged":
    "type": "string"
    "default": "auto"
    "description": |
      Allow kube-apiserver to run in privileged mode. Supported values are
      "true", "false", and "auto". If "true", kube-apiserver will run in
      privileged mode by default. If "false", kube-apiserver will never run in
      privileged mode. If "auto", kube-apiserver will not run in privileged
      mode by default, but will switch to privileged mode if gpu hardware is
      detected on a worker node.
  "enable-nvidia-plugin":
    "type": "string"
    "default": "auto"
    "description": |
      Load the nvidia device plugin daemonset. Supported values are
      "auto" and "false". When "auto", the daemonset will be loaded
      only if GPUs are detected. When "false" the nvidia device plugin
      will not be loaded.
  "channel":
    "type": "string"
    "default": "1.12/stable"
    "description": |
      Snap channel to install Kubernetes master services from
  "client_password":
    "type": "string"
    "default": ""
    "description": |
      Password to be used for admin user (leave empty for random password).
  "api-extra-args":
    "type": "string"
    "default": ""
    "description": |
      Space separated list of flags and key=value pairs that will be passed as arguments to
      kube-apiserver. For example a value like this:
        runtime-config=batch/v2alpha1=true profiling=true
      will result in kube-apiserver being run with the following options:
        --runtime-config=batch/v2alpha1=true --profiling=true
  "controller-manager-extra-args":
    "type": "string"
    "default": ""
    "description": |
      Space separated list of flags and key=value pairs that will be passed as arguments to
      kube-controller-manager. For example a value like this:
        runtime-config=batch/v2alpha1=true profiling=true
      will result in kube-controller-manager being run with the following options:
        --runtime-config=batch/v2alpha1=true --profiling=true
  "scheduler-extra-args":
    "type": "string"
    "default": ""
    "description": |
      Space separated list of flags and key=value pairs that will be passed as arguments to
      kube-scheduler. For example a value like this:
        runtime-config=batch/v2alpha1=true profiling=true
      will result in kube-scheduler being run with the following options:
        --runtime-config=batch/v2alpha1=true --profiling=true
  "authorization-mode":
    "type": "string"
    "default": "AlwaysAllow"
    "description": |
      Comma separated authorization modes. Allowed values are
      "RBAC", "Node", "Webhook", "ABAC", "AlwaysDeny" and "AlwaysAllow".
  "require-manual-upgrade":
    "type": "boolean"
    "default": !!bool "true"
    "description": |
      When true, master nodes will not be upgraded until the user triggers
      it manually by running the upgrade action.
  "storage-backend":
    "type": "string"
    "default": "auto"
    "description": |
      The storage backend for kube-apiserver persistence. Can be "etcd2", "etcd3", or
      "auto". Auto mode will select etcd3 on new installations, or etcd2 on upgrades.
  "enable-metrics":
    "type": "boolean"
    "default": !!bool "true"
    "description": |
      If true the metrics server for Kubernetes will be deployed onto the cluster.
  "default-storage":
    "type": "string"
    "default": "auto"
    "description": |
      The storage class to make the default storage class. Allowed values are "auto",
      "none", "ceph-xfs", "ceph-ext4". Note: Only works in Kubernetes >= 1.10
  "keystone-policy":
    "default": |
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: k8s-auth-policy
        namespace: kube-system
        labels:
          k8s-app: k8s-keystone-auth
      data:
        policies: |
          [
            {
             "resource": {
                "verbs": ["get", "list", "watch"],
                "resources": ["*"],
                "version": "*",
                "namespace": "*"
              },
              "match": [
                {
                  "type": "role",
                  "values": ["k8s-viewers"]
                },
                {
                  "type": "project",
                  "values": ["k8s"]
                }
              ]
            },
            {
             "resource": {
                "verbs": ["*"],
                "resources": ["*"],
                "version": "*",
                "namespace": "default"
              },
              "match": [
                {
                  "type": "role",
                  "values": ["k8s-users"]
                },
                {
                  "type": "project",
                  "values": ["k8s"]
                }
              ]
            },
            {
             "resource": {
                "verbs": ["*"],
                "resources": ["*"],
                "version": "*",
                "namespace": "*"
              },
              "match": [
                {
                  "type": "role",
                  "values": ["k8s-admins"]
                },
                {
                  "type": "project",
                  "values": ["k8s"]
                }
              ]
            }
          ]
    "type": "string"
    "description": |
      Policy for Keystone authentication. This is used when a Keystone charm is
      related to kubernetes-master in order to provide authentication and authorization
      for Keystone users on the Kubernetes cluster.
  "enable-keystone-authorization":
    "type": "boolean"
    "default": !!bool "false"
    "description": |
      If true and the Keystone charm is related, users will authorize against
      the Keystone server. Note that if related, users will always authenticate
      against Keystone.
  "keystone-ssl-ca":
    "type": "string"
    "description": |
      Path to Keystone certificate authority for securing communications to Keystone.
    "default": ""
  "enable-gpusharing":
    "type": "boolean"
    "default": !!bool "true"
    "description": |
      Enables gpusharing on clusters with gpu nodes.
      For more info, please refer to https://github.com/AliyunContainerService/gpushare-scheduler-extender
